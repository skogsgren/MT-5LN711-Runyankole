# YAML Template for Training Config
# Programatically substituded variables MUST MATCH (CASE SENSITIVE) THE VARIABLE NAME IN Pipeline._generate_config_file()!
# original
# original
# BLEU

# 200000

# 0.01

# 2
# 2
# 4
# 64
# 64
# 128
# [0.2]
# [0.2]

# none

# Training files
data:
    corpus_1:
        path_src: ../data/original/nyn_train.bpe
        path_tgt: ../data/original/eng_train.bpe
        # transforms: [filtertoolong]
    valid:
        path_src: ../data/original/nyn_dev.bpe
        path_tgt: ../data/original/eng_dev.bpe
        # transforms: [filtertoolong]

# Number of GPUs, and IDs of GPUs
world_size: 1
gpu_ranks: [0]

save_data: run ## Where the samples will be written
overwrite: true
skip_empty_level: warning

# Vocabulary files, generated by onmt_build_vocab
src_vocab: run/source.vocab
tgt_vocab: run/target.vocab

# Vocabulary size - should be the same as in sentence piece
# I think 10,000 is the default in OpenNMT BPE implementation
src_vocab_size: 10000
tgt_vocab_size: 10000

decoder_start_token: "<s>"
default_specials: ["<unk>", "<blank>", "<s>", "</s>"]

# limit number of words to 50 (a rough check give max len is about 60 in all/train.bpe)
src_seq_length_trunc: 50
tgt_seq_length_trunc: 50

# Tokenization options
src_subword_model: source.model
tgt_subword_model: target.model

# Where to save the log file and the output models/checkpoints
log_file: train.log
save_model: models/model.nyneng

# Validation
valid_metrics: [BLEU]
scoring_debug: true
dump_preds: preds/ # needed for scoring_debug
verbose: true

# Stop training if it does not imporve after n validations
early_stopping: 8


# To save space, limit checkpoints to last n
# keep_checkpoint: 3

##WARNING: reduced all below by x10, should restore
# Default: 100000 - Train the model to max n steps
# Increase to 200000 or more for large datasets
# For fine-tuning, add up the required steps to the original steps
# there are around 540K tokens in the all/ dataset, with around 4096 batch_size, around 130 training steps (130 batches) should be enough for 1 epoch
train_steps: 200000 # 1024 for around 8 epochs
# Run validation after N steps
valid_steps: 128 # 128 steps should be 1 epoch
report_every: 64
save_checkpoint_steps: 128 # save after valid_steps


# Batching
num_workers: 12 # Default: 2, tiny datasets dont need much higher
bucket_size: 8192 # grouping together shorter sents that will be used in batches
batch_type: "tokens" # tokens: often preferred for Transformer models; #sents: useful when sentences are of similar length
normalization: "tokens"
batch_size: 8192 # change it when CUDA out of memory
valid_batch_size: 8192
accum_count: [1] # Default: 1. Accumulate gradient this many times. Approximately equivalent to updating batch_size * accum_count batches at once. Recommended for Transformer.

# Optimization
optim: "adam"
learning_rate: 0.01
warmup_steps: 128 # 1 epoch warm up should be enough
decay_method: none
adam_beta1: 0.9
adam_beta2: 0.98
max_grad_norm: 5
label_smoothing: 0.1
param_init: 0
param_init_glorot: true

# Model
model_dtype: "fp16"
encoder_type: transformer
decoder_type: transformer
position_encoding: true
enc_layers: 2
dec_layers: 2
heads: 4
hidden_size: 64
word_vec_size: 64
transformer_ff: 128
dropout_steps: [0]
dropout: [0.2]
attention_dropout: [0.2]

#TODO: Model - Alignement
lambda_align: 0 # Default: 0.0. Lambda value for alignement loss of Garg et al (2019)For more detailed information, see: https://arxiv.org/abs/1909.02074
alignment_layer: -3 # Default: -3. Layer number which has to be supervised.
alignment_heads: 0 # Default: 0, of cross attention heads per layer to supervised with
full_context_alignment: False # Default: False. Whether alignment is conditioned on full target context.

# Other
seed: 12345678