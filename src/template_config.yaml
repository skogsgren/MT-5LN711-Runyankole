# YAML Template for Training Config
# Programatically substituded variables MUST MATCH (CASE SENSITIVE) THE VARIABLE NAME IN Pipeline._generate_config_file()!
# DATASET_NAME
# METRIC
# HIDDEN_SIZE
# 
# 
# 

# Number of GPUs, and IDs of GPUs
world_size: 1
gpu_ranks: [0]

## Where the samples will be written
save_data: run

# Training files
data:
    corpus_1:
        path_src: ../data/DATASET_NAME/nyn_train.bpe
        path_tgt: ../data/DATASET_NAME/eng_train.bpe
        transforms: [filtertoolong]
    valid:
        path_src: ../data/DATASET_NAME/nyn_dev.bpe
        path_tgt: ../data/DATASET_NAME/eng_dev.bpe
        transforms: [filtertoolong]

# Vocabulary files, generated by onmt_build_vocab
src_vocab: run/source.vocab
tgt_vocab: run/target.vocab

# Vocabulary size - should be the same as in sentence piece
# I think 10,000 is the default in OpenNMT BPE implementation
src_vocab_size: 10000
tgt_vocab_size: 10000

# Filter out source/target longer than n if [filtertoolong] enabled
src_seq_length: 150
src_seq_length: 150

# Tokenization options
src_subword_model: source.model
tgt_subword_model: target.model

# Where to save the log file and the output models/checkpoints
log_file: train.log
save_model: models/model.nyneng

# Validation
valid_metrics: [METRIC]

# Stop training if it does not imporve after n validations
early_stopping: 4

# Default: 5000 - Save a model checkpoint for each n
save_checkpoint_steps: 1000

# To save space, limit checkpoints to last n
# keep_checkpoint: 3

##WARNING: reduced all below by x10, should restore
# Default: 100000 - Train the model to max n steps
# Increase to 200000 or more for large datasets
# For fine-tuning, add up the required steps to the original steps
train_steps: 300
# Default: 10000 - Run validation after n steps
valid_steps: 100
# Default: 4000 - for large datasets, try up to 8000
warmup_steps: 100
report_every: 10


# Batching
num_workers: 2 # Default: 2, tiny datasets dont need much higher
bucket_size: 8192 # Default: 262144, set same as batch_size to avoid load tiny dataset multiple times
batch_type: "tokens" # tokens: often preferred for Transformer models; #sents: useful when sentences are of similar length
batch_size: 8192 # change it when CUDA out of memory
valid_batch_size: 64
max_generator_batches: 2 # Purpose: Limits the number of mini-batches to pre-generate during inference for the generator.
accum_count: [1] # Default: 1. Accumulate gradient this many times. Approximately equivalent to updating batch_size * accum_count batches at once. Recommended for Transformer.

# Optimization
model_dtype: "fp16"
optim: "adam"
learning_rate: 2
# warmup_steps: 8000
decay_method: "noam"
adam_beta2: 0.998
max_grad_norm: 0
label_smoothing: 0.1
param_init: 0
param_init_glorot: true
normalization: "tokens"

# Model
encoder_type: transformer
decoder_type: transformer
position_encoding: true
enc_layers: 6 #TODO: try lower
dec_layers: 6 #TODO: try lower
heads: 8
hidden_size: HIDDEN_SIZE #TODO: try lower
word_vec_size: 512 #TODO: try lower
transformer_ff: 2048 #TODO: try lower
dropout_steps: [0]
dropout: [0.3]
attention_dropout: [0.3]

# Other
seed: 42